# Recursion and Stack

## Introduction
Recursion is a powerful programming concept that helps solve complex problems by breaking them into smaller, similar subproblems. A recursive function is a function that calls itself to solve a problem.

## Understanding Recursion
A recursive function has two main parts:
1. **Base Case**: The condition where the recursion stops.
2. **Recursive Case**: The part where the function calls itself with a smaller problem.

## Example: Calculating Power (x^n)
Let's write a function `pow(x, n)` that calculates `x` raised to the power `n`.

### Iterative Approach (Using Loop)
```javascript
function pow(x, n) {
  let result = 1;
  for (let i = 0; i < n; i++) {
    result *= x;
  }
  return result;
}

console.log(pow(2, 3)); // Output: 8
```

### Recursive Approach
```javascript
function pow(x, n) {
  if (n == 1) {
    return x;
  } else {
    return x * pow(x, n - 1);
  }
}

console.log(pow(2, 3)); // Output: 8
```

### Breakdown of Recursive Calls:
For `pow(2, 3)`, the function executes as follows:
```
pow(2, 3) = 2 * pow(2, 2)
pow(2, 2) = 2 * pow(2, 1)
pow(2, 1) = 2
```
The function keeps calling itself until `n` becomes `1`, which is the **base case**.

## Advantages of Recursion
- Makes code shorter and easier to understand.
- Useful in problems involving tree structures, graphs, and nested objects.
- Can simplify complex problems.

## Disadvantages of Recursion
- Uses more memory due to function calls stored in the call stack.
- If the base case is not defined properly, it may lead to infinite recursion.
- Recursive functions have a depth limit in JavaScript (around 10,000 calls in most engines).

## Optimizing Recursion
To avoid excessive memory usage, recursion can be optimized using **Tail Call Optimization** (TCO). However, not all JavaScript engines support TCO.

### Example of Tail-Optimized Recursion:
```javascript
function pow(x, n, result = 1) {
  if (n == 0) return result;
  return pow(x, n - 1, x * result);
}

console.log(pow(2, 3)); // Output: 8
```

## Conclusion
Recursion is a powerful technique for solving problems involving repetitive structures. However, it should be used carefully to avoid performance issues. In many cases, iterative approaches can be more efficient. Understanding when to use recursion is key to writing effective code.
**Understanding Recursion and Execution Stack in Simple Terms**

### What is Recursion?
Recursion is when a function calls itself to solve a smaller version of the same problem. This continues until it reaches a base condition that stops further calls.

Example: Calculating `x^n` (x raised to the power n)

#### Iterative Method (Using a Loop):
```js
function pow(x, n) {
  let result = 1;
  for (let i = 0; i < n; i++) {
    result *= x;
  }
  return result;
}
console.log(pow(2, 3)); // Output: 8
```

#### Recursive Method:
```js
function pow(x, n) {
  if (n == 1) {
    return x;
  } else {
    return x * pow(x, n - 1);
  }
}
console.log(pow(2, 3)); // Output: 8
```

**How Recursion Works:**
- `pow(2, 3) = 2 * pow(2, 2)`
- `pow(2, 2) = 2 * pow(2, 1)`
- `pow(2, 1) = 2` (Base condition reached, stops recursion)
- Now, it returns back step-by-step:
  - `pow(2, 2) = 2 * 2 = 4`
  - `pow(2, 3) = 2 * 4 = 8`

### Execution Context and Stack
Each function call has its own **execution context**, which stores:
1. Function arguments
2. Local variables
3. The line of code being executed

When a function calls another function (including itself recursively), JavaScript stores the current execution in a **stack** and moves to the new function call. Once a function completes, its execution context is removed from the stack, and JavaScript resumes the previous function.

#### Example of Stack during `pow(2,3)` Execution:
```
Call pow(2,3) → Store context in stack
Call pow(2,2) → Store context in stack
Call pow(2,1) → Store context in stack
Return 2 → Remove pow(2,1) from stack
Return 4 → Remove pow(2,2) from stack
Return 8 → Remove pow(2,3) from stack
```

### Memory Usage in Recursion vs Iteration
- **Recursive Method**: Uses **more memory** because each function call stores an execution context in the stack.
- **Iterative Method**: Uses **less memory**, as it modifies variables in a single function call.

### When to Use Recursion?
✅ When a problem is naturally recursive (like tree traversal, factorial, Fibonacci, etc.)
✅ When shorter, more readable code is preferred over memory optimization

### When to Avoid Recursion?
❌ When dealing with large numbers (risk of stack overflow)
❌ When performance and memory usage are critical

### Conclusion
- Recursion is powerful but should be used wisely.
- The execution stack plays an important role in handling function calls.
- Iterative methods are often more efficient, but recursion can make code simpler and more elegant.


# Recursive Traversals (Simplified)

Recursion is useful for traversing complex structures like a company's hierarchy.

## Example: Company Structure

Imagine a company with departments and employees:

```js
let company = {
  sales: [
    { name: 'John', salary: 1000 },
    { name: 'Alice', salary: 1600 }
  ],
  development: {
    sites: [
      { name: 'Peter', salary: 2000 },
      { name: 'Alex', salary: 1800 }
    ],
    internals: [
      { name: 'Jack', salary: 1300 }
    ]
  }
};
```

### Problem: Sum All Salaries
We need a function to calculate the total salary. The structure is complex because:
- Some departments have employees (arrays of objects).
- Some departments have subdepartments (nested objects).

### Solution: Recursion
Instead of writing multiple loops, we use recursion:

```js
function sumSalaries(department) {
  if (Array.isArray(department)) {
    // Base case: sum salaries of employees in the array
    return department.reduce((total, employee) => total + employee.salary, 0);
  } else {
    // Recursive case: iterate over subdepartments and sum their salaries
    let sum = 0;
    for (let subdep of Object.values(department)) {
      sum += sumSalaries(subdep);
    }
    return sum;
  }
}

console.log(sumSalaries(company)); // 7700
```

### How It Works
1. If `department` is an array, it sums up all salaries.
2. If `department` is an object, it recursively calls `sumSalaries` on each subdepartment.
3. This continues until all salaries are summed.

### Benefits of Recursion
- **Cleaner Code:** Avoids multiple nested loops.
- **Scalability:** Works for any level of subdepartment nesting.
- **Easy to Read:** Follows a clear pattern of breaking a problem into smaller parts.

This is a practical example of recursion that makes code shorter and more efficient!

**Recursive Structures**

A **recursive data structure** is a structure that repeats itself in parts. This means that a part of the structure contains a smaller version of itself.

### Examples of Recursive Structures
1. **Company Structure:** A department in a company can either have:
   - A list of employees (array of objects)
   - Other sub-departments (objects with more objects inside)

2. **HTML & XML Documents:**
   - An HTML tag can contain:
     - Text
     - Comments
     - Other HTML tags (which can again contain text, comments, and other tags)

### Linked List
A **linked list** is a recursive data structure that is an alternative to arrays. It is useful for fast insertion and deletion of elements.

#### Why Not Use Arrays?
- In arrays, inserting or deleting an element at the beginning requires **re-indexing** all elements, making it slow.
- Operations like `arr.unshift()` (insert at the start) or `arr.shift()` (remove from the start) take more time.
- However, adding or removing elements from the **end** (`arr.push()` and `arr.pop()`) is fast.

#### How a Linked List Works
A **linked list** consists of nodes, where each node has:
- A **value**
- A **next** property pointing to the next node

Example:
```javascript
let list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};
```

#### Another Way to Create a Linked List
```javascript
let list = { value: 1 };
list.next = { value: 2 };
list.next.next = { value: 3 };
list.next.next.next = { value: 4 };
list.next.next.next.next = null;
```

Each node contains a `value` and a `next` reference to the next node. If `next` is `null`, it means the end of the list.

### Benefits of a Linked List
- **Fast insertion and deletion** at any point without renumbering other elements.
- **Memory-efficient** for frequent insertions/removals.

### Modifying a Linked List
1. **Splitting a List**
   ```javascript
   let secondList = list.next.next;
   list.next.next = null; // Splitting the list
   ```
2. **Joining a List**
   ```javascript
   list.next.next = secondList;
   ```
3. **Prepending a New Value (Adding at the Start)**
   ```javascript
   list = { value: "new item", next: list };
   ```
4. **Removing a Value from the Middle**
   ```javascript
   list.next = list.next.next; // Removes second element
   ```
   - This skips over the removed node, disconnecting it from the list.
   - If not referenced elsewhere, JavaScript will automatically remove it from memory.

### Drawbacks of Linked Lists
- **Slow element access**: Unlike arrays where `arr[n]` gives direct access, linked lists require traversal (`next` pointer jumps) to reach the desired element.

### Enhancements for Linked Lists
- Add a `prev` property to each node for **easier backward movement**.
- Add a `tail` property to store the **last element** in the list.

### Summary
1. **Recursion**: A function calling itself to solve smaller versions of a problem.
2. **Recursive Data Structure**: A structure that is defined using itself (e.g., linked lists, HTML trees, company structures).
3. **Linked List**: A series of connected nodes where each node has a value and a pointer to the next node.
4. **Advantages**: Fast insertions/deletions, flexible structure.
5. **Disadvantages**: Slow element access compared to arrays.
6. **Recursive Traversal**: Useful for structures like company hierarchies, HTML trees, and linked lists.

Any recursive function can be converted into an **iterative** function if needed, but recursion often makes the code shorter and easier to understand.


